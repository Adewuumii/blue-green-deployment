# Custom log format for observability
log_format custom_format '{'
    '"time":"$time_iso8601",'
    '"remote_addr":"$remote_addr",'
    '"request":"$request",'
    '"status":$status,'
    '"body_bytes_sent":$body_bytes_sent,'
    '"request_time":$request_time,'
    '"upstream_addr":"$upstream_addr",'
    '"upstream_status":"$upstream_status",'
    '"upstream_response_time":"$upstream_response_time",'
    '"pool":"$upstream_http_x_app_pool",'
    '"release":"$upstream_http_x_release_id"'
'}';

# Blue/Green upstream configuration
upstream backend {
    # Primary server (Blue by default)
    server app_blue:3000 max_fails=1 fail_timeout=5s;
    
    # Backup server (Green - only used when Blue fails)
    server app_green:3000 backup max_fails=1 fail_timeout=5s;
}

server {
    listen 80;
    server_name localhost;

    # Logging with custom format
    access_log /var/log/nginx/access.log custom_format;
    error_log /var/log/nginx/error.log;

    location / {
        # Route to backend upstream
        proxy_pass http://backend;

        # Retry on errors, timeouts, and 5xx responses
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 10s;

        # Tight timeouts for quick failure detection
        proxy_connect_timeout 2s;
        proxy_send_timeout 3s;
        proxy_read_timeout 5s;

        # Forward client headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Pass through upstream response headers (X-App-Pool, X-Release-Id)
        proxy_pass_request_headers on;
    }

    # Health check endpoint
    location /nginx-health {
        access_log off;
        return 200 "Nginx OK\n";
        add_header Content-Type text/plain;
    }
}